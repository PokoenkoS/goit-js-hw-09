{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAe,wBACnCC,EAAUF,SAASC,cAAe,uBAClCE,EAASH,SAASC,cAAc,sBAChCG,EAAMJ,SAASC,cAAe,UAEhCI,EAAW,EACfD,EAAIE,iBAAkB,SAEtB,SAAyBC,GACvBA,EAAIC,iBACJ,IAAIC,EAAOC,OAAOP,EAAOQ,OACrBC,EAAQF,OAAOR,EAAQS,OACvBE,EAAQH,OAAOX,EAASY,OAEtBG,EAAYC,aAAY,WAsBhC,IAAuBC,EAAUC,EArB/BZ,GAAW,EACXO,GAASH,EACTS,QAAQC,IAAId,GACZa,QAAQC,IAAIP,GAENP,GAAYQ,IACdO,cAAcN,GACdI,QAAQC,IAAK,UAcIH,EAXLX,EAWeY,EAXLL,EAYnB,IAAIS,SAAQ,SAACC,EAASC,GAE5B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACPH,GACJF,EAAQ,CAACM,SAAAZ,EAAUC,UAGnBM,EAAO,CAACK,SAAAZ,EAAUC,S,GAEhBA,E,KAtB8BY,MAAK,SAAAC,G,IAAEC,EAAQD,EAARF,SAAUX,EAAKa,EAALb,M,OAClDe,EAAAnC,GAASoC,OAAOC,QAAS,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANlB,EAAM,M,IACvEmB,OAAM,SAAAN,G,IAAEO,EAAQP,EAARF,SAAUX,EAAKa,EAALb,M,OAClBe,EAAAnC,GAASoC,OAAOK,QAAS,sBAAqCH,OAAfE,EAAS,QAAYF,OAANlB,EAAM,M,IAErEL,GAASH,C,GACNG,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst amountEl = document.querySelector(`input[name=\"amount\"]`);\nconst delayEl = document.querySelector(`input[name=\"delay\"]`);\nconst stepEl = document.querySelector('input[name=\"step\"]');\nconst btn = document.querySelector(`button`);\n\nlet position = 0;\nbtn.addEventListener(`click`, onCreatePromise);\n\nfunction onCreatePromise(evt) {\n  evt.preventDefault();\n  let step = Number(stepEl.value);\n  let delay = Number(delayEl.value);\n  let amount= Number(amountEl.value);\n \n  const timeoutId = setInterval(() => {\n  position +=1;\n  delay += step;\n  console.log(position);\n  console.log(delay);\n  \n    if (position >= amount){\n      clearInterval(timeoutId)\n      console.log(`stop`);\n    }\n   \n    createPromise(position, delay).then(({position, delay}) => \n  Notiflix.Notify.success (`✅ Fulfilled promise ${position} in ${delay}ms`)\n).catch(({position, delay}) => \n  Notiflix.Notify.failure (`❌ Rejected promise ${position} in ${delay}ms`)\n )\n delay += step;\n  },delay)\n \n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n \n   const shouldResolve = Math.random() > 0.3;\n   setTimeout(() =>{\n   if (shouldResolve) {\n   resolve({position, delay});\n     \n   } \n   reject({position, delay})\n     \n   },delay)\n })\n }\n\n \n \n  \n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$amountEl","document","querySelector","$ce04d3a99e08e73b$var$delayEl","$ce04d3a99e08e73b$var$stepEl","$ce04d3a99e08e73b$var$btn","$ce04d3a99e08e73b$var$position","addEventListener","evt","preventDefault","step","Number","value","delay1","amount","timeoutId","setInterval","position3","delay","console","log","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","then","param","position1","$parcel$interopDefault","Notify","success","concat","catch","position2","failure"],"version":3,"file":"03-promises.1b250b5b.js.map"}